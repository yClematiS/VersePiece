print([[
--------------------------------------------------------------------------------------
 ________  ___       _______   _____ ______   ________  _________  ___  ________      
|\   ____\|\  \     |\  ___ \ |\   _ \  _   \|\   __  \|\___   ___\\  \|\   ____\     
\ \  \___|\ \  \    \ \   __/|\ \  \\\__\ \  \ \  \|\  \|___ \  \_\ \  \ \  \___|_    
 \ \  \    \ \  \    \ \  \_|/_\ \  \\|__| \  \ \   __  \   \ \  \ \ \  \ \_____  \   
  \ \  \____\ \  \____\ \  \_|\ \ \  \    \ \  \ \  \ \  \   \ \  \ \ \  \|____|\  \  
   \ \_______\ \_______\ \_______\ \__\    \ \__\ \__\ \__\   \ \__\ \ \__\_________\
    \|_______|\|_______|\|_______|\|__|     \|__|\|__|\|__|    \|__|  \|__|\_________|

                        ___  ___  ___  ___  ________     
                        |\  \|\  \|\  \|\  \|\   __  \    
                        \ \  \\\  \ \  \\\  \ \  \|\ /_   
                         \ \   __  \ \  \\\  \ \   __  \  
                          \ \  \ \  \ \  \\\  \ \  \|\  \ 
                           \ \__\ \__\ \_______\ \_______\
                            \|__|\|__|\|_______|\|_______|
----------------------------------------------------------------------------------------------- --
]])


local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:FindFirstChild("HumanoidRootPart")

while not rootPart do
    rootPart = character:FindFirstChild("HumanoidRootPart")
    wait()
end

game:GetService("Players").LocalPlayer.Idled:connect(function()
    game:GetService("VirtualUser"):CaptureController()
    game:GetService("VirtualUser"):ClickButton2(Vector2.new())
end)

function getmaincode()
    local characters = "QWERTYUIOPASDFGHJKLZXCVBNM"
    local result = ""
    for i = 1, 1 do
        local randomIndex = math.random(2, #characters)
        result = result .. string.sub(characters, randomIndex, randomIndex)
    end
    return result
end

function getcode()
    local characters = "1234567890"
    local result = ""
    for i = 1, 5 do
        local randomIndex = math.random(2, #characters)
        result = result .. string.sub(characters, randomIndex, randomIndex)
    end
    return result
end

local function startTypingAnimation3()
    local randomText1 = getmaincode()
    local randomText2 = getcode()
    local username = game.Players.LocalPlayer.Character.Name
    random_name = " | Clematis Hub | " .. username .. " | Session : ( "..randomText1.."-"..randomText2.." ) "
end
spawn(startTypingAnimation3)

local usernames = game.Players.LocalPlayer.Character.Name
local pid = tostring(game.PlaceId)

print("Loading Lib")
_G.theme = "Amethyst"
wait(0.2)
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
print("Ui Lib Loaded")
wait(1)
print("Loading Function")
local MainWindow = Rayfield:CreateWindow({
    Name = random_name or "Clematis Hub | Err Loading | Session : ( Error! )",
    Icon = 0,
    LoadingTitle = "Loading!",
    LoadingSubtitle = "Script By Seaweed_hunter",
    Theme = _G.theme,
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "ClematisHub",
        FileName = usernames .. "_SavedConfig_" .. pid
    },
    Discord = {
        Enabled = false,
        Invite = "noinvitelink",
        RememberJoins = true
    },
    KeySystem = false,
    KeySettings = {
        Title = "Key?",
        Subtitle = "Key on Discord Server",
        Note = "Get Key From Discord",
        FileName = "Key",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"NOOOO"}
    }
})

--FLAG-----------------------------------------------------------------------------------

IsOnMob = false
IsMining = false
IsAutoHit = false
IsFastHit = false
IsWorldBoss = false
IsFindingWhip = false
IsLootingChest = false

--OPTIMIZE-----------------------------------------------------------------------------------
local player = game:GetService("Players").LocalPlayer
function disableSelectable()
    local playerGui = player:FindFirstChild("PlayerGui")
    if playerGui then
        local targets = {"HUD", "Mobile"}
        for _, targetName in ipairs(targets) do
            local targetGui = playerGui:FindFirstChild(targetName)
            if targetGui then
                for _, guiObject in pairs(targetGui:GetDescendants()) do
                    if guiObject:IsA("GuiObject") then
                        guiObject.Selectable = false
                    end
                end
            end
        end
    end
end
disableSelectable()


local MainTab = MainWindow:CreateTab("Auto Farm")

local Tools = MainTab:CreateSection("Tools")
local tool = {}
local playertools
local function refreshTools()
    tool = {}
    local player = game.Players.LocalPlayer
    local character = player.Character
    if character then
        for _, obj in pairs(character:GetChildren()) do
            if obj:IsA("Tool") then
                table.insert(tool, obj.Name)
            end
        end
    end
    
    for _, obj in pairs(player.Backpack:GetChildren()) do
        if obj:IsA("Tool") then
            table.insert(tool, obj.Name)
        end
    end

    if playertools then
        playertools:Refresh(tool)
    end
end

local player = game.Players.LocalPlayer
local ATools = false
local defaulttool = ""

local function equipToolToCharacter()
    local character = player.Character
    if character and character:FindFirstChild("Humanoid") and character.Humanoid.Health > 0 then
        local tool = player.Backpack:FindFirstChild(defaulttool)
        if tool then
            local success, errorMessage = pcall(function()
                tool.Parent = character
            end)
            if not success then
                warn("Error equipping tool: ", errorMessage)
            end
        end
    end
end

playertools = MainTab:CreateDropdown({
    Name = "Select Tool",
    Options = tool,
    CurrentOption = defaulttool,
    MultipleOptions = false,
    Flag = "EquipTool",
    Callback = function(Option)
        local selected = type(Option) == "table" and Option[1] or Option
        if selected and table.find(tool, selected) then
            defaulttool = selected
        end
    end,
})

local refreshdropdowntool = MainTab:CreateButton({
    Name = "Refresh Tools",
    Callback = function()
        refreshTools()
    end,
})

refreshTools()
equipTask = nil
local AutoEquipToggle = MainTab:CreateToggle({
    Name = "Auto Equip Selected Tool",
    CurrentValue = false,
    Flag = "EquipSelectedTool",
    Callback = function(Value)
        ATools = Value
        if ATools then
            if equipTask then
                task.cancel(equipTask)
            end
            equipTask = task.spawn(function()
                while ATools do
                    equipToolToCharacter()
                    task.wait(0.5)
                end
            end)
        else
            if equipTask then
                task.cancel(equipTask)
                equipTask = nil
            end
        end
    end,
})

player.CharacterAdded:Connect(function()
    if ATools then
        task.wait(1)
        equipToolToCharacter()
    end
end)



local Attack = MainTab:CreateSection("M1")
local mfastattack = false
local userInputService = game:GetService("UserInputService")
local inputConnection
local function onMouseClick()
    if mfastattack then
        local player = game.Players.LocalPlayer
        local equippedTool = player.Character and player.Character:FindFirstChildOfClass("Tool")

        if equippedTool then
            local toolstype = equippedTool:FindFirstChildOfClass("BoolValue")
            if toolstype then
                local mcount = math.random(1, 5)

                local args = {
                    [1] = "Server",
                    [2] = toolstype.Name,
                    [3] = "M1s",
                    [4] = mcount,
                    [5] = equippedTool.Name
                }

                game:GetService("ReplicatedStorage").Remotes.Serverside:FireServer(unpack(args))
            end
        end
    end
end

local fastattack = MainTab:CreateToggle({
    Name = "Fast Attack [Manual]",
    CurrentValue = false,
    Flag = "fastattack",
    Callback = function(Value)
        mfastattack = Value

        if inputConnection then
            inputConnection:Disconnect()
            inputConnection = nil
        end

        if mfastattack then
            inputConnection = userInputService.InputBegan:Connect(function(input, gameProcessed)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    onMouseClick()
                end
            end)
        end
    end
})


local autoattack = false
local AutoAttack = MainTab:CreateToggle({
    Name = "Auto Hit [Slow No Animation]",
    CurrentValue = false,
    Flag = "AHit",
    Callback = function(Value)
        autoattack = Value
        while autoattack do
            local success, err = pcall(function()
                local player = game.Players.LocalPlayer
                local equippedTool = player.Character and player.Character:FindFirstChildOfClass("Tool")

                if not equippedTool then
                    error("No tool equipped.")
                end

                local toolstype = equippedTool:FindFirstChildOfClass("BoolValue")
                if not toolstype then
                    error("No item type found in the tool.")
                end

                local args = {
                    [1] = "Server",
                    [2] = toolstype.Name,
                    [3] = "M1s", 
                    [4] = nil,
                    [5] = equippedTool.Name
                }
                game:GetService("ReplicatedStorage").Remotes.Serverside:FireServer(unpack(args))
            end)

            task.wait(0.2)
            if not autoattack then break end
        end
    end
})

local quickautoattack = false
local count = 1
local attackTask = nil
local quickattack = MainTab:CreateToggle({
    Name = "Auto Fast Hit [Animation]",
    CurrentValue = false,
    Flag = "quickautoattack",
    Callback = function(Value)
        quickautoattack = Value
        
        if quickautoattack then
            if attackTask then
                task.cancel(attackTask)
                attackTask = nil 
            end
            attackTask = task.spawn(function()
                while quickautoattack do
                    local player = game.Players.LocalPlayer
                    local equippedTool = player.Character and player.Character:FindFirstChildOfClass("Tool")

                    if equippedTool then
                        local toolstype = equippedTool:FindFirstChildOfClass("BoolValue")
                        if toolstype then
                            local args = {
                                [1] = "Server",
                                [2] = toolstype.Name,
                                [3] = "M1s", 
                                [4] = count,
                                [5] = equippedTool.Name
                            }

                            game:GetService("ReplicatedStorage").Remotes.Serverside:FireServer(unpack(args))

                            count = count + 1
                            if count > 5 then
                                count = 1
                            end
                        end
                    end

                    task.wait(0.01)
                end
            end)
        else
            if attackTask then
                task.cancel(attackTask)
                attackTask = nil
            end
        end
    end
})

local Skills = MainTab:CreateSection("Skill Selection")
secskills = {
    ["Skill 1"] = "Move1",
    ["Skill 2"] = "Move2",
    ["Skill 3"] = "Move3",
    ["Skill 4"] = "Move4",
    ["Skill 5"] = "Move5",
}
defaultsecskills = {}

local skillsecdropdown = MainTab:CreateDropdown({
    Name = "Select Skill",
    Options = {"Skill 1", "Skill 2", "Skill 3", "Skill 4", "Skill 5"},
    CurrentOption = {},
    MultipleOptions = true,
    Flag = "Select Skill",
    Callback = function(Options)
        defaultsecskills = {}

        for _, selected in ipairs(Options) do
            if secskills[selected] then
                table.insert(defaultsecskills, secskills[selected])
            end
        end
    end,
})

local spamskill = false
local spamskill = MainTab:CreateToggle({
    Name = "Auto Skills",
    CurrentValue = false,
    Flag = "skillz",
    Callback = function(Value)
        spamskill = Value
        while spamskill do
            local success, err = pcall(function()
                if #defaultsecskills == 0 then
                    error("No skill selected.")
                end

                local player = game.Players.LocalPlayer
                local equippedTool = player.Character and player.Character:FindFirstChildOfClass("Tool")

                if not equippedTool then
                    error("No tool equipped.")
                end

                local toolstype = equippedTool:FindFirstChildOfClass("BoolValue")
                if toolstype.Name == "Fruit" or "Sword" then
                    combattype = toolstype.Name
                end
                if toolstype.Name == "Combat" then
                    combattype = "Special"
                end
                if not toolstype then
                    error("No item type found in the tool.")
                end

                for _, skill in ipairs(defaultsecskills) do
                    local args = {
                        [1] = "Server",
                        [2] = combattype,
                        [3] = skill,
                        [4] = true,
                        [5] = equippedTool.Name
                    }
                    game:GetService("ReplicatedStorage").Remotes.Serverside:FireServer(unpack(args))
                    task.wait(0.5)
                end
            end)

            task.wait(0.5)
            if not spamskill then break end
        end
    end
})

local autoabilly = false
local autoabilly = MainTab:CreateToggle({
    Name = "Auto Ability",
    CurrentValue = false,
    Flag = "skillz",
    Callback = function(Value)
        autoabilly = Value
        while autoabilly do
            pcall(function()
                local args = {
                    [1] = "Server",
                    [2] = "Misc",
                    [3] = "Ability"
                }
                
                game:GetService("ReplicatedStorage").Remotes.Serverside:FireServer(unpack(args))
            end)
            task.wait(0.5)
            if not autoabilly then break end
        end
    end
})

local InstantKill = MainTab:CreateSection("Kill Aura")
killmobpercent = {
    ["95%"] = 0.95,
    ["90%"] = 0.90,
    ["75%"] = 0.75,
    ["50%"] = 0.50,
    ["25%"] = 0.25,
    ["10%"] = 0.10,
}
defaultkillmobpercent = 0.90

local killmobpercentDropdown = MainTab:CreateDropdown({
    Name = "Kill Mob at %",
    Options = {"95%", "90%", "75%", "50%", "25%", "10%"},
    CurrentOption = "90%",
    MultipleOptions = false,
    Flag = "Inskillpercent",
    Callback = function(Option)
        local selected = type(Option) == "table" and Option[1] or Option
        if killmobpercent[selected] then
            defaultkillmobpercent = killmobpercent[selected]
        end
    end,
})

 local hitbox = nil
 local ShowHitbox = false
 local runService = game:GetService("RunService")
 
 local function createHitbox(radius)
     if hitbox then
         hitbox:Destroy()
     end
     hitbox = Instance.new("Part")
     hitbox.Shape = Enum.PartType.Ball
     hitbox.Size = Vector3.new(radius * 2, radius * 2, radius * 2)
     hitbox.Material = Enum.Material.ForceField
     hitbox.CastShadow = false
     hitbox.Anchored = false
     hitbox.CanCollide = false
     hitbox.BrickColor = BrickColor.Red()
     hitbox.Massless = true
     hitbox.Parent = workspace
 end
 
 local function attachHitboxToCharacter()
     local me = game.Players.LocalPlayer.Character
     if not me then return end
 
     local hrp = me:FindFirstChild("HumanoidRootPart")
     if not hrp then return end
 
     if hitbox then
         hitbox.CFrame = hrp.CFrame
         
         local existingWeld = hitbox:FindFirstChildOfClass("WeldConstraint")
         if existingWeld then
             existingWeld:Destroy()
         end
         
         local weldConstraint = Instance.new("WeldConstraint")
         weldConstraint.Part0 = hrp
         weldConstraint.Part1 = hitbox
         weldConstraint.Parent = hitbox
     end
 end
 
 local function updateHitboxSize()
    if ShowHitbox then
         if hitbox then
             local newSize = Vector3.new(defaultstudmob * 2, defaultstudmob * 2, defaultstudmob * 2)
             if hitbox.Size ~= newSize then
                 hitbox.Size = newSize
             end
         end
    end
 end
 
 local ShowHitboxToggle = MainTab:CreateToggle({
     Name = "Mob Search Distance",
     CurrentValue = false,
     Flag = "Mob Search",
     Callback = function(Value)
         ShowHitbox = Value
         if ShowHitbox then
             if not hitbox then
                 createHitbox(defaultstudmob)
             end
             attachHitboxToCharacter()
             task.spawn(updateHitboxSize)
         else
             if hitbox then
                 hitbox:Destroy()
                 hitbox = nil
             end
         end
     end
 })
 
 game.Players.LocalPlayer.CharacterAdded:Connect(function()
     if ShowHitbox then
         task.wait(1)
         createHitbox(defaultstudmob)
         attachHitboxToCharacter()
         task.spawn(updateHitboxSize)
     end
 end) 

 defaultstudmob = 150
local FindClosedMob = MainTab:CreateSlider({
    Name = "Find closest mob",
    Range = {10, 1040},
    Increment = 10,
    Suffix = "Stud",
    CurrentValue = 150,
    Flag = "closestmobb",
    Callback = function(Value)
    defaultstudmob = Value
    task.spawn(updateHitboxSize)
    end,
 })
 
 local SetHealth = false
 local hitboxThread = nil
 local KillAura = MainTab:CreateToggle({
     Name = "Instant Kill",
     CurrentValue = false,
     Flag = "Kill Aura",
     Callback = function(Value)
         SetHealth = Value
         
         if SetHealth and not hitboxThread then
             hitboxThread = task.spawn(function()
                if not SetHealth and hitboxThread then
                    task.cancel(hitboxThread)
                    hitboxThread = nil
                    return
                end
                 while SetHealth do
                     task.wait(0.1)
                     local success, errorMessage = pcall(function()
                         local mobFolder = workspace:FindFirstChild("Main")
                         local me = game.Players.LocalPlayer.Character
                         if not me then 
                            task.wait(2)
                            return 
                        end
                         local hrp = me:FindFirstChild("HumanoidRootPart")
                         if not hrp then 
                            task.wait(2)
                            return 
                        end
 
                         if mobFolder then
                             local plyRoot = hrp
                             local closestMob, closestDistance = nil, math.huge
                             for _, islandFolder in pairs(mobFolder:GetChildren()) do
                                 if islandFolder:IsA("Folder") then
                                     for _, mob in pairs(islandFolder:GetChildren()) do
                                         local mobHumanoid = mob:FindFirstChildOfClass("Humanoid")
                                         local rootPart = mob:FindFirstChild("HumanoidRootPart")
                                         local isMob = mob:FindFirstChild("Mob")
                                         
                                         if mobHumanoid and rootPart and isMob and isMob:IsA("BoolValue") and mobHumanoid.Health > 0 then
                                             local distance = (plyRoot.Position - rootPart.Position).Magnitude
                                             if distance < closestDistance then
                                                 closestDistance = distance
                                                 closestMob = mob
                                             end
                                         end
                                     end
                                     for _, mobGroupFolder in pairs(islandFolder:GetChildren()) do
                                         if mobGroupFolder:IsA("Folder") then
                                             for _, mob in pairs(mobGroupFolder:GetChildren()) do
                                                 local mobHumanoid = mob:FindFirstChildOfClass("Humanoid")
                                                 local rootPart = mob:FindFirstChild("HumanoidRootPart")
                                                 local isMob = mob:FindFirstChild("Mob")
                                                 
                                                 if mobHumanoid and rootPart and isMob and isMob:IsA("BoolValue") and mobHumanoid.Health > 0 then
                                                     local distance = (plyRoot.Position - rootPart.Position).Magnitude
                                                     if distance < closestDistance then
                                                         closestDistance = distance
                                                         closestMob = mob
                                                     end
                                                 end
                                             end
                                         end
                                     end
                                 end
                             end
                             if closestMob and closestDistance <= defaultstudmob then
                                 local humanoid = closestMob:FindFirstChildOfClass("Humanoid")
                                 local rootPart = closestMob:FindFirstChild("HumanoidRootPart")
                                 if humanoid and rootPart and humanoid.Health > 0 then
                                    
                                     
                                     if humanoid.Health < humanoid.MaxHealth * defaultkillmobpercent then
                                         humanoid.Health = 0
                                         humanoid.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None
                                     end
                                 end
                             end
                         end
                     end)
 
                     if not success then
                         warn("Error in KillAura loop: ", errorMessage)
                     end
                 end
                 hitboxThread = nil
             end)
         elseif not SetHealth and hitboxThread then
             hitboxThread = nil
         end
     end
 })

local MobFarmer = MainTab:CreateSection("Teleport to Mob")
local defaultrange = 6
local selectedMethod = "Up"

local function updateMobMethods()
    return {
        ["Front"] = CFrame.new(0, 0, -defaultrange) * CFrame.Angles(0, math.rad(180), 0),
        ["Up"] = CFrame.new(0, defaultrange, 0) * CFrame.Angles(math.rad(-90), 0, 0),
        ["Down"] = CFrame.new(0, -defaultrange, 0) * CFrame.Angles(math.rad(90), 0, 0),
        ["Behind"] = CFrame.new(0, 0, defaultrange) * CFrame.Angles(0, math.rad(0), 0),
    }
end

local mobMethods = updateMobMethods()
local defaultmobmethod = mobMethods[selectedMethod]
local mobDropdown = MainTab:CreateDropdown({
    Name = "Mob Farm Method",
    Options = {"Front", "Up", "Down", "Behind"},
    CurrentOption = selectedMethod,
    MultipleOptions = false,
    Flag = "mobmethod",
    Callback = function(Option)
        selectedMethod = type(Option) == "table" and Option[1] or Option
        defaultmobmethod = mobMethods[selectedMethod]
    end,
})

local FindClosedMob = MainTab:CreateSlider({
    Name = "Farm Mob Range",
    Range = {1, 50},
    Increment = 1,
    Suffix = "Stud",
    CurrentValue = defaultrange,
    Flag = "mobfarmrange",
    Callback = function(Value)
        defaultrange = Value
        mobMethods = updateMobMethods()
        defaultmobmethod = mobMethods[selectedMethod]
    end,
})

local OnMob = false
local Sittingsss = nil
local bodyVelocity
local GoToMob = MainTab:CreateToggle({
    Name = "Go to closest mob",
    CurrentValue = false,
    Flag = "OnMob",
    Callback = function(Value)
        OnMob = Value
        if OnMob and not Sittingsss then
            Sittingsss = task.spawn(function()
                while OnMob do
                    task.wait(0.1)
                    local success, errorMessage = pcall(function()
                        local mobFolder = workspace:FindFirstChild("Main")
                        local player = game.Players.LocalPlayer
                        local character = player.Character or player.CharacterAdded:Wait()
                        local humanoid = character:FindFirstChildOfClass("Humanoid")
                        local hrp = character:FindFirstChild("HumanoidRootPart")                        
                        
                        if IsMining then
                            return
                        end
                        
                        IsOnMob = true
                         if not humanoid or humanoid.Health <= 0 or not hrp then
                            IsOnMob = false
                            task.wait(2)
                             return
                         end

                         if not IsOnMob then
                            return
                         end

                         humanoid.PlatformStand = true
 
                         if bodyVelocity then
                             bodyVelocity:Destroy()
                         end
                         bodyVelocity = Instance.new("BodyVelocity")
                         bodyVelocity.MaxForce = Vector3.new(100000, 100000, 100000)
                         bodyVelocity.Velocity = Vector3.zero
                         bodyVelocity.Parent = hrp
 
                         if mobFolder then
                             local closestMob, closestDistance = nil, math.huge
                             for _, islandFolder in pairs(mobFolder:GetChildren()) do
                                 if islandFolder:IsA("Folder") then
                                     for _, mob in pairs(islandFolder:GetChildren()) do
                                         local mobHumanoid = mob:FindFirstChildOfClass("Humanoid")
                                         local rootPart = mob:FindFirstChild("HumanoidRootPart")
                                         local isMob = mob:FindFirstChild("Mob")
 
                                         if mobHumanoid and rootPart and isMob and isMob:IsA("BoolValue") and mobHumanoid.Health > 0 then
                                             local distance = (hrp.Position - rootPart.Position).Magnitude
                                             if distance < closestDistance then
                                                 closestDistance = distance
                                                 closestMob = mob
                                             end
                                         end
                                     end

                                     for _, mobGroupFolder in pairs(islandFolder:GetChildren()) do
                                         if mobGroupFolder:IsA("Folder") then
                                             for _, mob in pairs(mobGroupFolder:GetChildren()) do
                                                 local mobHumanoid = mob:FindFirstChildOfClass("Humanoid")
                                                 local rootPart = mob:FindFirstChild("HumanoidRootPart")
                                                 local isMob = mob:FindFirstChild("Mob")
 
                                                 if mobHumanoid and rootPart and isMob and isMob:IsA("BoolValue") and mobHumanoid.Health > 0 then
                                                     local distance = (hrp.Position - rootPart.Position).Magnitude
                                                     if distance < closestDistance then
                                                         closestDistance = distance
                                                         closestMob = mob
                                                     end
                                                 end
                                             end
                                         end
                                     end
                                 end
                             end
 
                             if closestMob and closestDistance <= defaultstudmob then
                                 local rootPart = closestMob:FindFirstChild("HumanoidRootPart")
                                 if rootPart then
                                     hrp.CFrame = rootPart.CFrame * defaultmobmethod
                                 end
                             end
                         end
                     end)
 
                     if not success then
                         warn("Error in GoToMob loop: ", errorMessage)
                     end
                 end
 
                 local player = game.Players.LocalPlayer
                 local character = player.Character
                 if character then
                     local humanoid = character:FindFirstChildOfClass("Humanoid")
                     local hrp = character:FindFirstChild("HumanoidRootPart")
 
                     if humanoid then
                         humanoid.PlatformStand = false
                     end
                     if hrp then
                         if bodyVelocity then
                             bodyVelocity:Destroy()
                         end
                         for _, obj in pairs(hrp:GetChildren()) do
                             if obj:IsA("BodyVelocity") then
                                 obj:Destroy()
                             end
                         end
                     end
                 end
                 Sittingsss = nil
             end)
        elseif not OnMob and Sittingsss then
            IsOnMob = false
            task.cancel(Sittingsss)
            Sittingsss = nil
            local player = game.Players.LocalPlayer
            local character = player.Character
            if character then
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                local hrp = character:FindFirstChild("HumanoidRootPart")

                if humanoid then
                    humanoid.PlatformStand = false
                end
                if hrp then
                    for _, obj in pairs(hrp:GetChildren()) do
                        if obj:IsA("BodyVelocity") then
                            obj:Destroy()
                        end
                    end
                end
            end
        end
    end
})

 Bosses = {
    "Lancer [Lv.???]",
    "Fallen Angel [Lv.???]",
    "Gilgamesh [Lv.???]",
    "Boss Island",
    "Skull"
}
SecBosses = {}

local WorldBossFarmer = MainTab:CreateSection("Auto World Boss")
AWBoss = MainTab:CreateDropdown({
    Name = "Select Boss",
    Options = Bosses,
    CurrentOption = {},
    MultipleOptions = true,
    Flag = "SelectBoss",
    Callback = function(Option)
        SecBosses = type(Option) == "table" and Option or {Option}
        print("Selected Bosses:", table.concat(SecBosses, ", "))
    end,
})

AutoWBoss = false
local function isBossSpawned(boss)
    if boss and boss:FindFirstChild("HumanoidRootPart") then
        local humanoidRootPart = boss.HumanoidRootPart
        local billboard = humanoidRootPart:FindFirstChildOfClass("BillboardGui")
        if billboard and billboard.Enabled then
            return true
        end
    end
    return false
end

local function teleportToBoss(boss)
    if boss and boss:FindFirstChild("HumanoidRootPart") then
        IsWorldBoss = true
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = boss.HumanoidRootPart.CFrame*CFrame.new(0,0,defaultrange)
    end
end

game.Players.LocalPlayer.Character:WaitForChild("Humanoid").Died:Connect(function()
    IsWorldBoss = false
end)

local AutoBosses = MainTab:CreateToggle({
    Name = "Auto Goto Boss [If spawned]",
    CurrentValue = false,
    Flag = "ABoss",
    Callback = function(Value)
        AutoWBoss = Value
        while AutoWBoss do
            task.wait(0.1)
            local bossFound = false
            
            local success, err = pcall(function()
                local player = game.Players.LocalPlayer
                local character = player and player.Character
                if not character or character:FindFirstChild("Humanoid") and character.Humanoid.Health <= 0 then
                    IsWorldBoss = false
                    task.wait(2)
                    return
                end
            end)
            if not success then
                warn("Error checking character status:", err)
                IsWorldBoss = false
                return
            end

            for _, bossName in pairs(SecBosses) do
                local bossLocation = nil
                
                if bossName == "Lancer [Lv.???]" then
                    bossLocation = workspace.Main.RaidBoss
                elseif bossName == "Fallen Angel [Lv.???]" then
                    bossLocation = workspace.Main["Fallen Angel"]
                elseif bossName == "Gilgamesh [Lv.???]" then
                    bossLocation = workspace.Main.Desert.Gilgamesh
                elseif bossName == "Boss Island" then
                    bossLocation = workspace.Main:FindFirstChild("Boss")
                elseif bossName == "Skull" then
                    bossLocation = workspace.Main:FindFirstChild("Skull")
                end

                if bossLocation then
                    for _, boss in pairs(bossLocation:GetChildren()) do
                        if isBossSpawned(boss) then
                            bossFound = true
                            if not IsWorldBoss then
                                IsWorldBoss = true
                            end
                            local success, err = pcall(function()
                                teleportToBoss(boss)
                            end)
                            if not success then
                                warn("Error teleporting to boss:", err)
                            end
                            break
                        end
                    end
                end
            end

            if not bossFound then
                IsWorldBoss = false
            end
        end
    end,
})

AutoWLootv2 = false
local lootTaskv2 = nil

function tptochest(chest)
    if chest and chest:IsA("Part") and chest:FindFirstChild("PrimaryPart") then
        for i = 1, 5 do
            task.wait(0.3)
            local player = game.Players.LocalPlayer
            if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                player.Character.HumanoidRootPart.CFrame = chest.PrimaryPart.CFrame + Vector3.new(0, 10, 4)
            end
        end
    end
end

function interactChest(chest)
    if chest then
        for _, child in pairs(chest:GetChildren()) do
            if child:IsA("ProximityPrompt") then
                child.HoldDuration = 0
                child.MaxActivationDistance = 1000000
                child.RequiresLineOfSight = false
                task.wait(0.1)
                for i = 1, 5 do
                    task.spawn(function ()
                        pcall(function()
                            child:InputHoldBegin()
                            task.wait(child.HoldDuration)
                            child:InputHoldEnd()
                        end)
                    end)
                    task.wait(0.25)
                end
            end
        end
    end
end

function autoloot()
    local playerGui = game.Players.LocalPlayer:FindFirstChild("PlayerGui")
    if not playerGui then return end
    local lootGui = playerGui:FindFirstChild("Loot")
    if not lootGui then
        IsLootingChest = false
        local player = game.Players.LocalPlayer
        local character = player and player.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            for _, chest in pairs(workspace.Main:GetChildren()) do
                if chest.Name == "Raid Chest" then
                    tptochest(chest)
                    return
                end
            end
        end
        return
    end

    local mainFrame = lootGui:FindFirstChild("Main")
    if not mainFrame then 
        warn("Main Frame ไม่พบ!")
        return
    end

    local invFrame = mainFrame:FindFirstChild("Iinv")
    if not invFrame then 
        warn("Iinv Frame ไม่พบ!")
        return
    end

    local materialFrame = invFrame:FindFirstChild("Material")
    if not materialFrame then
        warn("Material Frame ไม่พบ!")
        return
    else
        task.wait(0.5)
        game:GetService("Players").LocalPlayer.PlayerGui.Loot.Main.Iinv.Material.Selectable = false
    end

    local cancelButton = invFrame:FindFirstChild("Cancel")
    if cancelButton then
        cancelButton.Parent = materialFrame
    end

    local VirtualInputManager = game:GetService("VirtualInputManager")
    local function pressKey(key)
        VirtualInputManager:SendKeyEvent(true, key, false, game)
        task.wait(0.1)
        VirtualInputManager:SendKeyEvent(false, key, false, game)
    end

    pressKey(Enum.KeyCode.BackSlash)
    task.wait(0.5)
    for i = 1, 100 do
        local playerGui = game.Players.LocalPlayer:FindFirstChild("PlayerGui")
        local lootGui = playerGui and playerGui:FindFirstChild("Loot")
        if not lootGui or not lootGui:FindFirstChild("Main") then
            IsLootingChest = false
            break
        end
        pressKey(Enum.KeyCode.Return)
        task.wait(0.5)
    end
    IsLootingChest = false
end

local autolootv2 = MainTab:CreateToggle({
    Name = "Auto Loot Chest",
    CurrentValue = false,
    Flag = "ALootChestFauto",
    Callback = function(Value)
        AutoWLootv2 = Value

        if not AutoWLootv2 then
            IsLootingChest = false   
        end

        if lootTaskv2 then
            task.cancel(lootTaskv2)
        end

        pcall(function()
            local player = game.Players.LocalPlayer
            local character = player and player.Character
            if not character or character:FindFirstChild("Humanoid") and character.Humanoid.Health <= 0 then
                IsLootingChest = false
                task.wait(2)
                return
            end
        end)
        lootTaskv2 = task.spawn(function()
            while AutoWLootv2 do
                task.wait(0.5)
                for _, chest in pairs(workspace.Main:GetChildren()) do
                    if chest.Name == "Raid Chest" and not IsLootingChest then
                        IsLootingChest = true
                        task.spawn(function()
                            pcall(function ()
                                disableSelectable()
                            end)
                            pcall(function()
                                tptochest(chest)
                            end)
                            pcall(function()
                                interactChest(chest)
                            end)

                            task.wait(2)

                            pcall(function()
                                autoloot()
                            end)
                        end)
                        task.wait(3)
                    end
                end
            end
        end)
    end,
})

local Quest = MainWindow:CreateTab("Quest")
Getting_Quest = false
tasktodo = ""

local function getrepquest1()
    local mission = workspace.Npc.Quest.Mission
    local togetquest = mission.HumanoidRootPart
    local ply = game.Players.LocalPlayer.Character
    ply.HumanoidRootPart.CFrame = togetquest.CFrame

    local prompt = mission.ProximityPrompt
    prompt.HoldDuration = 0
    prompt:InputHoldBegin()
    prompt:InputHoldEnd()
end

local function getrepquest2()
    local mission = workspace.Npc.Quest["Mission 2"]
    local togetquest = mission.Union
    local ply = game.Players.LocalPlayer.Character
    ply.HumanoidRootPart.CFrame = togetquest.CFrame

    local prompt = togetquest.ProximityPrompt
    prompt.HoldDuration = 0
    prompt:InputHoldBegin()
    prompt:InputHoldEnd()
end

local function dotask()
    local ply = game.Players.LocalPlayer.Character

    if tasktodo == "Find The Goblet around forest" then
        local thisgob = workspace.Main["Mission Quest"]["2"].Goblet
        local prompt = thisgob.ProximityPrompt
        prompt.HoldDuration = 0
        prompt.RequiresLineOfSight = false
        ply.HumanoidRootPart.CFrame = thisgob.CFrame
        prompt:InputHoldBegin()
        prompt:InputHoldEnd()
    end

    if tasktodo == "Close The Shadow Portal" then
        local thispor = workspace.Main["Mission Quest"]["5"].Portal
        local prompt = thispor.ProximityPrompt
        prompt.HoldDuration = 0
        prompt.RequiresLineOfSight = false
        prompt.Enabled = true
        ply.HumanoidRootPart.CFrame = thispor.CFrame
        prompt:InputHoldBegin()
        prompt:InputHoldEnd()
    end

    if tasktodo == "Steal  The object around Huecomundo" then
        local obj = workspace.Main["Mission Quest 2"]["2"].Object
        local prompt = obj.ProximityPrompt
        prompt.HoldDuration = 0
        prompt.RequiresLineOfSight = false
        prompt.Enabled = true
        ply.HumanoidRootPart.CFrame = obj.CFrame
        prompt:InputHoldBegin()
        prompt:InputHoldEnd()
    end

    if tasktodo == "Close The Huecomundo Gate" then
        local gate = workspace.Main["Mission Quest 2"]["1"]["1"]
        local prompt = gate.ProximityPrompt
        local ply = game.Players.LocalPlayer
        if not gate:FindFirstChild("PathStanding") then
            local platform = Instance.new("Part")
            platform.Name = "PathStanding"
            platform.Size = Vector3.new(20, 1, 20)
            platform.Position = gate.Position - Vector3.new(0, gate.Size.Y / 2 - 5, 0)
            platform.Anchored = true
            platform.Transparency = 1
            platform.CanCollide = true
            platform.Parent = gate
        end
        prompt.HoldDuration = 0
        prompt.MaxActivationDistance = 100
        prompt.RequiresLineOfSight = false
        prompt.Enabled = true
        ply.Character.HumanoidRootPart.CFrame = gate.CFrame + Vector3.new(0, 3, 0)
        prompt:InputHoldBegin()
        task.wait(0.01)
        prompt:InputHoldEnd()
    end    
    
    if tasktodo == "Rescue  Civilains" then
        local civs = workspace.Main["Mission Quest"]["4"]:GetChildren()  
        for _, thisciv in ipairs(civs) do
            if thisciv:IsA("Model") then
                local hrp = thisciv:FindFirstChild("HumanoidRootPart")
                local prompt = thisciv:FindFirstChildWhichIsA("ProximityPrompt")
                
                if hrp and prompt then
                    local ply = game.Players.LocalPlayer.Character
                    if ply and ply:FindFirstChild("HumanoidRootPart") then
                        ply.HumanoidRootPart.CFrame = hrp.CFrame
                        prompt.HoldDuration = 0
                        prompt.RequiresLineOfSight = false
                        prompt:InputHoldBegin()
                        prompt:InputHoldEnd()
                        break
                    end
                end
            end
        end
    end     

    if tasktodo == "Collect  Curse object in chest around forest" then
        local chests = workspace.Main["Mission Quest"]["1"]:GetChildren()
        for _, thischest in ipairs(chests) do
            if thischest:IsA("Model") then
                local hrp = thischest:FindFirstChild("HumanoidRootPart")
                local prompt = hrp and hrp:FindFirstChildWhichIsA("ProximityPrompt")
                
                if hrp and prompt then
                    local ply = game.Players.LocalPlayer.Character
                    if ply and ply:FindFirstChild("HumanoidRootPart") then
                        ply.HumanoidRootPart.CFrame = hrp.CFrame
                        prompt.HoldDuration = 0
                        prompt.RequiresLineOfSight = false
                        prompt:InputHoldBegin()
                        prompt:InputHoldEnd()
                        break
                    end
                end
            end
        end
    end

    if tasktodo == "Defeat Lightning Sorceror" then
        local bossModel = workspace:FindFirstChild("Main") and workspace.Main:FindFirstChild("Forest")
            and workspace.Main.Forest:FindFirstChild("Kashimo")
            and workspace.Main.Forest.Kashimo:FindFirstChild("Kashimo [Lv.???]")

        if bossModel and bossModel:FindFirstChild("Humanoid") and bossModel.Humanoid.Health > 0 then
            local hrp = bossModel:FindFirstChild("HumanoidRootPart")
            if hrp then
                local targetCFrame = hrp.CFrame * CFrame.new(0, 0, defaultrange)
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = targetCFrame
            end
        end
    end

    if tasktodo == "Defeat Kurosagi Ichigo" then
        local bossModel = workspace:FindFirstChild("Main") and workspace.Main:FindFirstChild("Hueco")
            and workspace.Main.Hueco:FindFirstChild("Ichigo")
            and workspace.Main.Hueco.Ichigo:FindFirstChild("Ichigo [Lv.???]")

        if bossModel and bossModel:FindFirstChild("Humanoid") and bossModel.Humanoid.Health > 0 then
            local hrp = bossModel:FindFirstChild("HumanoidRootPart")
            if hrp then
                local targetCFrame = hrp.CFrame * CFrame.new(0, 0, defaultrange)
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = targetCFrame
            end
        end
    end

    if tasktodo == "Clear  Curse Spirit around forest" then
        local spirits = workspace.Main.Forest:FindFirstChild("Curse Spirit")
        if spirits then
            for _, spirit in ipairs(spirits:GetChildren()) do
                if spirit:IsA("Model") and spirit:FindFirstChild("Humanoid") and spirit:FindFirstChild("HumanoidRootPart") then
                    if spirit.Humanoid.Health > 0 then
                        local hrp = spirit:FindFirstChild("HumanoidRootPart")
                        if hrp then
                            local targetCFrame = hrp.CFrame * CFrame.new(0, 0, defaultrange)
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = targetCFrame
                            task.wait(0.1)
                            break
                        end
                    end
                end
            end
        end
    end

    if tasktodo == "Clear  Arrrancar around Huecomundo" then
        local arrrancars = workspace.Main.Hueco.Arrancar
        if arrrancars then
            for _, spirit in ipairs(arrrancars:GetChildren()) do
                if spirit:IsA("Model") and spirit:FindFirstChild("Humanoid") and spirit:FindFirstChild("HumanoidRootPart") then
                    if spirit.Humanoid.Health > 0 then
                        local hrp = spirit:FindFirstChild("HumanoidRootPart")
                        if hrp then
                            local targetCFrame = hrp.CFrame * CFrame.new(0, 0, defaultrange)
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = targetCFrame
                            task.wait(0.1)
                            break
                        end
                    end
                end
            end
        end
    end
end
MissionSelect = "Mission1"

local Missions = Quest:CreateDropdown({
    Name = "Select Missions",
    Options = {
        "Mission1",
        "Mission2",
    },
    CurrentOption = "Mission1",
    MultipleOptions = false,
    Flag = "Mission_Select",
    Callback = function(Option)
        local selected = type(Option) == "table" and Option[1] or Option
        MissionSelect = tostring(selected)
    end,
})

local GetRepQuest = Quest:CreateToggle({
    Name = "Auto Farm Reputation",
    CurrentValue = false,
    Flag = "Mission",
    Callback = function(Value)
        Getting_Quest = Value
        if Getting_Quest then
            task.spawn(function ()
                local bangcam = workspace.Map.Bleach
                for _, v in pairs(bangcam:GetChildren()) do
                    if v:IsA("Part") then
                        v:Destroy()
                    end
                end
            end)
            task.spawn(function()
                while Getting_Quest do
                    task.wait(1)
                    pcall(function()
                        local player = game.Players.LocalPlayer
                        local character = player and player.Character

                        if not character or (character:FindFirstChild("Humanoid") and character.Humanoid.Health <= 0) then
                            task.wait(2)
                            return
                        end

                        if IsMining or IsWorldBoss or IsFindingWhip or IsLootingChest then
                            print("Auto Farm Rep Paused")
                            task.wait(1)
                            return
                        end

                        local camera = game.Workspace.CurrentCamera
                        camera.FieldOfView = 120
                        local currentPos = camera.CFrame.Position
                        local newPosition = currentPos + Vector3.new(0, 5, 0)

                        local tiltDown = CFrame.Angles(math.rad(-80), 0, 0)

                        camera.CFrame = CFrame.new(newPosition) * tiltDown


                        local questGui = player.PlayerGui:FindFirstChild("Mission Quest")
                        if questGui and questGui:FindFirstChild("Frame") then
                            local hasMission = false
                            for _, v in pairs(questGui.Frame:GetChildren()) do
                                if v.Name == "MissionData" then
                                    hasMission = true
                                    local gettask = v.Bar.Quest.Text
                                    local cleanTask = gettask:gsub("%d+", ""):gsub("^%s*(.-)%s*$", "%1")
                                    tasktodo = tostring(cleanTask)
                                    dotask()
                                    break
                                end
                            end

                            if not hasMission then
                                if MissionSelect == "Mission1" then
                                    getrepquest1()
                                elseif MissionSelect == "Mission2" then
                                    getrepquest2()
                                end
                            end
                        end
                    end)
                end
            end)
        end
        if not Getting_Quest then
            tasktodo = ""
			task.wait(4)
            local camera = game.Workspace.CurrentCamera
            camera.FieldOfView = 70
        end
    end,
})

local ItemTap = MainWindow:CreateTab("Items")
local Minning = false
local minedOre = {}
local oresToMine = 0
local oresMined = 0

local function resetMiningCache()
    minedOre = {}
    oresToMine = 0
    oresMined = 0
    warn("Reset Ore Cache!")
end

local function mineOre(ore)
    local player = game.Players.LocalPlayer
    local character = player.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then
        warn("Player is dead, skipping ore...")
        return false
    end

    local humanoid = character:FindFirstChild("Humanoid")
    if humanoid and humanoid.Health <= 0 then
        warn("Player is dead, waiting to respawn...")
        return false
    end

    if oresMined >= oresToMine then
        warn("Mining limit reached, resetting ore cache...")
        resetMiningCache()
        task.wait(1)
        return
    end

    local prompt = nil
    for _, obj in pairs(ore:GetDescendants()) do
        if obj:IsA("ProximityPrompt") and obj.Enabled then
            prompt = obj
            break
        end
    end
    if not prompt then return false end

    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    humanoidRootPart.CFrame = ore.PrimaryPart.CFrame * CFrame.new(0, 3, 0)

    local camera = game.Workspace.CurrentCamera
    local orePosition = ore.PrimaryPart.Position
    camera.CFrame = CFrame.new(orePosition + Vector3.new(0, 5, 0), orePosition)

    character = player.Character
    humanoid = character and character:FindFirstChild("Humanoid")
    if not character or not humanoid or humanoid.Health <= 0 then
        warn("Player died again, skipping mining...")
        return false
    end

    task.wait(0.3)
    prompt.MaxActivationDistance = 100
    prompt.RequiresLineOfSight = false
    prompt:InputHoldBegin()
    
    if IsWorldBoss or IsFindingWhip or IsLootingChest then
        prompt:InputHoldEnd()
        return false
    end
    task.wait(prompt.HoldDuration)

    prompt:InputHoldEnd()
    if prompt.Enabled then
        warn("ProximityPrompt still enabled, resetting ores...")
        resetMiningCache()
        return false
    end

    minedOre[ore] = true
    oresMined = oresMined + 1 
    warn("Mined Ore:", oresMined, "Total Ores:", oresToMine)

    return true
end

local function countOres()
    local oreFolder = workspace.Main.Ore
    local ores = {}
    oresToMine = 0
    warn("Counting All Ores")
    
    for _, ore in pairs(oreFolder:GetChildren()) do
        if ore:IsA("Model") and ore.Name == "Ore" then
            local promptFound = false
            for _, obj in pairs(ore:GetDescendants()) do
                if obj:IsA("ProximityPrompt") and obj.Enabled then
                    promptFound = true
                    oresToMine = oresToMine + 1
                    break
                end
            end
            
            if promptFound and not minedOre[ore] then
                table.insert(ores, ore)
            end
        end
    end
    return ores
end

function FixMiningLag()
    pcall(function ()
        local me = game.Players.LocalPlayer.Character
        for _, lagfix in pairs(me:GetChildren()) do
            if lagfix:IsA("IntValue") and lagfix.Name == "Mining" then
                lagfix:Destroy()
                print("Deleted All Mining Cache")
            end
        end
    end)
end

local function waitForCharacter()
    local player = game.Players.LocalPlayer
    while not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") do
        warn("Waiting for character respawn...")
        task.wait(1)
    end
    return player.Character
end

local function waitForOreFolder()
    while not workspace:FindFirstChild("Main") or not workspace.Main:FindFirstChild("Ore") do
        warn("Waiting for Ore Folder...")
        task.wait(1)
    end
    return workspace.Main.Ore
end

local MinningToggle = ItemTap:CreateToggle({
    Name = "Auto Mine Ore",
    CurrentValue = false,
    Flag = "AOre",
    Callback = function(Value)
        Minning = Value

        if not Minning then 
            resetMiningCache()
            return
        end

        while Minning do
            task.wait(0.2)
        
            local success, err = pcall(function()
                local player = game.Players.LocalPlayer
                local character = waitForCharacter()

                print("Return Status: ", tostring(IsWorldBoss), tostring(IsFindingWhip), tostring(IsLootingChest))
                if IsWorldBoss or IsFindingWhip or IsLootingChest then
                    print("Hunting Boss or Finding Wisp or Looting Chest")
                    resetMiningCache()
                    task.wait(2)
                    return
                end

                if FixMiningLag then FixMiningLag() end
                local oreFolder = waitForOreFolder()
                local ores = countOres()
                task.wait(0.2)

                if oresToMine == 0 then
                    warn("Over Data Return...")
                    resetMiningCache()
                    task.wait(1)
                    return
                end

                if oresMined >= oresToMine then
                    warn("Over Data Return...")
                    resetMiningCache()
                    task.wait(1)
                    return
                end

                if #ores == 0 then
                    warn("No Ores Found Resetting...")
                    resetMiningCache()
                    task.wait(2)
                    return
                end

                for _, ore in ipairs(ores) do
                    if not Minning then break end
                    local mineSuccess, mineErr = pcall(function()
                        mineOre(ore)
                    end)

                    if not mineSuccess then
                        warn("Error mining ore:", mineErr)
                    end
                end     

                task.wait(1)
            end)

            if not success then
                warn("Error in mining loop:", err)
            end
        end
    end,
})

local Wisp = ItemTap:CreateSection("Auto Find Wisp")
findingwisp = false
local Afindwisp = ItemTap:CreateToggle({
    Name = "Auto Find Wisp",
    CurrentValue = false,
    Flag = "AFWisp",
    Callback = function(Value)
        findingwisp = Value

        if findingwisp then
            while findingwisp do
                task.wait(1)

                local success, me = pcall(function()
                    return game.Players.LocalPlayer.Character
                end)

                if not success or not me then
                    warn("Error: Player's character is missing (possibly dead).")
                    break
                end

                local wispContainer = workspace:FindFirstChild("Main")
                local wisps = wispContainer and wispContainer:FindFirstChild("Wisp")

                if wisps and #wisps:GetChildren() > 0 then
                    for _, wisp in pairs(wisps:GetChildren()) do
                        if wisp:IsA("Model") then
                            local torso = wisp:FindFirstChild("Torso")
                            local prompt = torso and torso:FindFirstChildOfClass("ProximityPrompt")
                            local hrp = me:FindFirstChild("HumanoidRootPart")

                            if torso and prompt and hrp then
                                hrp.CFrame = torso.CFrame
                                prompt.HoldDuration = 0
                                prompt:InputHoldBegin()
                                task.wait(prompt.HoldDuration)
                                prompt:InputHoldEnd()
                            end
                        end
                    end
                else
                    warn("No Wisps found. Retrying...")
                end
            end
        end
    end,
})

local location = MainWindow:CreateTab("Teleport")
local gotoplayer = location:CreateSection("Players")
local GotoPlayerRepeat = false
local defaultotherplayer = ""
local otplayers = {}

local otherplayers = location:CreateDropdown({
    Name = "Select Player",
    Options = otplayers,
    CurrentOption = defaultotherplayer,
    MultipleOptions = false,
    Callback = function(Option)
        local selected = type(Option) == "table" and Option[1] or Option
        if selected and table.find(otplayers, selected) then
            defaultotherplayer = selected
        end
    end,
})

local function refreshplayers()
    otplayers = {}
    for _, player in pairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer then
            table.insert(otplayers, player.Name)
        end
    end
    if otherplayers then
        otherplayers:Refresh(otplayers)
    end
end

local refreshdropdownplayers = location:CreateButton({
    Name = "Refresh Players",
    Callback = function()
        refreshplayers()
    end,
})

local GotoPlayerToggle = location:CreateToggle({
    Name = "Goto Selected Player",
    CurrentValue = false,
    Callback = function(Value)
        GotoPlayerRepeat = Value
        if GotoPlayerRepeat then
            task.spawn(function()
                while GotoPlayerRepeat do
                    wait(0.1)

                    local success, err = pcall(function()
                        local targetPlayer = game.Players:FindFirstChild(defaultotherplayer)
                        if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                            local me = game.Players.LocalPlayer.Character
                            if not me then
                                task.wait(1)
                                return
                            end
                            if me and me:FindFirstChild("HumanoidRootPart") then
                                me:PivotTo(targetPlayer.Character.HumanoidRootPart.CFrame*CFrame.new(0,1,2))
                            end
                        end
                    end)
                    
                    if not success then
                        warn(err)
                    end
                end
            end)
        end
    end,
})

refreshplayers()
local map = location:CreateSection("Islands")

for _, obj in pairs(workspace.Map:GetChildren()) do
    if obj:IsA("Model") then
        local primary = obj.PrimaryPart or obj:FindFirstChildWhichIsA("BasePart")
        
        if primary then
            location:CreateButton({
                Name = obj.Name,
                Callback = function()
                    local me = game.Players.LocalPlayer.Character
                    if me and me:FindFirstChild("HumanoidRootPart") then
                        me:PivotTo(primary.CFrame*CFrame.new(0,50,0))
                    end
                end
            })
        end
    end
end

local npcstab = MainWindow:CreateTab("NPC")
local quest = npcstab:CreateSection("Quest")
for _, obj in pairs(workspace.Npc.Quest:GetChildren()) do
    if obj:IsA("Model") then
        local primary = obj.PrimaryPart or obj:FindFirstChildWhichIsA("BasePart")
        
        if primary then
            npcstab:CreateButton({
                Name = obj.Name,
                Callback = function()
                    local me = game.Players.LocalPlayer.Character
                    if me and me:FindFirstChild("HumanoidRootPart") then
                        me:PivotTo(primary.CFrame*CFrame.new(0,0,-3))
                    end
                end
            })
        end
    end
end

local npcs = npcstab:CreateSection("Combat")
for _, obj in pairs(workspace.Npc.Combat:GetChildren()) do
    if obj:IsA("Model") then
        local primary = obj.PrimaryPart or obj:FindFirstChildWhichIsA("BasePart")
        
        if primary then
            npcstab:CreateButton({
                Name = obj.Name,
                Callback = function()
                    local me = game.Players.LocalPlayer.Character
                    if me and me:FindFirstChild("HumanoidRootPart") then
                        me:PivotTo(primary.CFrame*CFrame.new(0,0,-3))
                    end
                end
            })
        end
    end
end
    
local npcs2 = npcstab:CreateSection("Misc")
for _, obj in pairs(workspace.Npc.Misc:GetChildren()) do
    if obj:IsA("Model") then
        local primary = obj.PrimaryPart or obj:FindFirstChildWhichIsA("BasePart")
        
        if primary then
            npcstab:CreateButton({
                Name = obj.Name,
                Callback = function()
                    local me = game.Players.LocalPlayer.Character
                    if me and me:FindFirstChild("HumanoidRootPart") then
                        me:PivotTo(primary.CFrame*CFrame.new(0,0,-3))
                    end
                end
            })
        end
    end
end

local npcs3 = npcstab:CreateSection("Sword")
for _, obj in pairs(workspace.Npc.Sword:GetChildren()) do
    if obj:IsA("Model") then
        local primary = obj.PrimaryPart or obj:FindFirstChildWhichIsA("BasePart")
        
        if primary then
            npcstab:CreateButton({
                Name = obj.Name,
                Callback = function()
                    local me = game.Players.LocalPlayer.Character
                    if me and me:FindFirstChild("HumanoidRootPart") then
                        me:PivotTo(primary.CFrame*CFrame.new(0,0,-3))
                    end
                end
            })
        end
    end
end

local MiscTab = MainWindow:CreateTab("Misc")
local AutoClick = MiscTab:CreateSection("Auto Click")
local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")

local player = Players.LocalPlayer
local screenGui = CoreGui:FindFirstChild("CrosshairGui")

if not screenGui then
    screenGui = Instance.new("ScreenGui")
    screenGui.Name = "CrosshairGui"
    screenGui.Parent = CoreGui

    local crosshair = Instance.new("ImageLabel")
    crosshair.Size = UDim2.new(0, 45, 0, 45)
    crosshair.Position = UDim2.new(0.5, -5, 0.5, 260)
    crosshair.BackgroundTransparency = 1
    crosshair.Image = "rbxassetid://103448393060927"
    crosshair.Parent = screenGui
    
    local dragging, dragInput, dragStart, startPos

    local function Update(input)
        local delta = input.Position - dragStart
        crosshair.Position = UDim2.new(
            startPos.X.Scale, startPos.X.Offset + delta.X,
            startPos.Y.Scale, startPos.Y.Offset + delta.Y
        )
    end

    local function StartDrag(input)
        dragging = true
        dragStart = input.Position
        startPos = crosshair.Position
    end

    local function StopDrag()
        dragging = false
    end

    crosshair.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            StartDrag(input)
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    StopDrag()
                end
            end)
        end
    end)

    crosshair.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            Update(input)
        end
    end)
end

local function endClick()
    local success, errorMessage = pcall(function()
        local crosshair = screenGui:FindFirstChildOfClass("ImageLabel")
        if crosshair then
            local midX, midY = crosshair.AbsolutePosition.X + 10, crosshair.AbsolutePosition.Y + 10
            VirtualInputManager:SendMouseButtonEvent(midX, midY, 0, true, game, 0)
            task.wait(0.1)
            VirtualInputManager:SendMouseButtonEvent(midX, midY, 0, false, game, 0)
        end
    end)
    
    if not success then
        warn("Error in endClick:", errorMessage)
    end
end


local Clicking = false
local clickThread = nil
Clicking = MiscTab:CreateToggle({
    Name = "Auto Click",
    CurrentValue = false,
    Flag = "Clicking",
    Callback = function(Value)
        Clicking = Value
        if Clicking and not clickThread then
            clickThread = task.spawn(function()
                while Clicking do
                    local success, errorMessage = pcall(function()
                        endClick()
                    end)
                    
                    if not success then
                        warn("Error in Auto Click loop:", errorMessage)
                    end
                    
                    game:GetService("RunService").RenderStepped:Wait()
                end
            end)
        elseif not Clicking and clickThread then
            clickThread = nil
        end
    end
})

local PlayerPlus = MiscTab:CreateSection("Player")
local defaultMaxZoom = game.Players.LocalPlayer.CameraMaxZoomDistance
local Maxzoom = MiscTab:CreateToggle({
    Name = "Unlock Max Zoom",
    CurrentValue = false,
    Flag = "Maxzoom",
    Callback = function(Value)
        if Value then
            game.Players.LocalPlayer.CameraMaxZoomDistance = math.huge
        else
            game.Players.LocalPlayer.CameraMaxZoomDistance = defaultMaxZoom
        end
    end,
})

local PowerSaving = MiscTab:CreateSection("Power Saving Mode")
local blackScreen

function createBlackScreen()
    if not blackScreen then
        blackScreen = Instance.new("ScreenGui")
        blackScreen.Name = "BlackScreen"
        blackScreen.Parent = game:GetService("CoreGui")

        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(2, 2, 2, 2)
        frame.Position = UDim2.new(0, 0, 0, 0)
        frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        frame.BorderSizePixel = 0
        frame.Parent = blackScreen
    end
end

function removeBlackScreen()
    if blackScreen then
        blackScreen:Destroy()
        blackScreen = nil
    end
end

_G.psingfps = 10
local savepowerfps = MiscTab:CreateInput({
    Name = "FPS Locker",
    CurrentValue = "",
    PlaceholderText = "Input Number",
    RemoveTextAfterFocusLost = false,
    Flag = "psingfps",
    Callback = function(psingfps)
        _G.psingfps = tonumber(psingfps)
    end,
})

_G.savingpower = false
local savepower = MiscTab:CreateToggle({
    Name = "Power Saving Mode",
    CurrentValue = false,
    Flag = "savepower",
    Callback = function(Value)
        _G.savingpower = Value
        local playerGui = game:GetService("Players").LocalPlayer.PlayerGui
        local runService = game:GetService("RunService")

        if _G.savingpower then
            task.spawn(function()
                while _G.savingpower do
                    if _G.savingpower then
                        setfpscap(_G.psingfps)
                    end
                    print("FPS set to: " .. _G.psingfps)
                    task.wait(10)
                end
            end)
            runService:Set3dRenderingEnabled(false)
            createBlackScreen()
        else
            setfpscap(60)
            runService:Set3dRenderingEnabled(true)
            removeBlackScreen()
        end
    end,
})

framelocker = false
local framelock = MiscTab:CreateToggle({
    Name = "Frame Rate Locker",
    CurrentValue = false,
    Flag = "framelocker",
    Callback = function(Value)
        framelocker = Value
        if framelocker then
            task.spawn(function()
                while framelocker do
                    if framelocker then
                        setfpscap(_G.psingfps)
                    end
                    print("FPS set to: " .. _G.psingfps)
                    task.wait(10)
                end
            end)
        else
            setfpscap(60)
        end
    end,
})

local ClearMobs = MiscTab:CreateSection("Clear All Loaded Mobs")
local ClearMob = MiscTab:CreateButton({
    Name = "Clear All Loaded Mobs [RISK]",
    Callback = function()
        local tofindmob = workspace.Main
        for i,v in pairs(tofindmob:GetDescendants()) do
            if v.Name == "Humanoid" then
                v.Health = 0
        end
    end
    end,
 })

Rayfield:LoadConfiguration()

_G.searcherayfield = true
local foundray = false
task.spawn(function ()
while _G.searcherayfield and not foundray do
    task.wait(1)
    local coreGui = game:GetService("CoreGui")
    for _, v in pairs(coreGui:GetDescendants()) do
        if v.Name == "Rayfield" then
            local rayfie = v
            foundray = true
            _G.searcherayfield = false
            rayfie.Enabled = false

            local screenGui = Instance.new("ScreenGui")
            screenGui.Name = "ToggleRayfield"
            screenGui.Parent = coreGui

            local shadowframe = Instance.new("Frame")
            shadowframe.Size = UDim2.new(0, 100, 0, 100)
            shadowframe.Position = UDim2.new(0.015, 0, 0.2, 0)
            shadowframe.BackgroundTransparency = 0.8
            shadowframe.BorderSizePixel = 0
            shadowframe.BackgroundColor3 = Color3.fromRGB(153, 102, 204)
            shadowframe.Parent = screenGui

            local shadowcorner = Instance.new("UICorner")
            shadowcorner.CornerRadius = UDim.new(0.2, 0)
            shadowcorner.Parent = shadowframe

            local shadowbutton = Instance.new("ImageButton")
            shadowbutton.Size = UDim2.new(1, 0, 1, 0)
            shadowbutton.BackgroundTransparency = 1
            shadowbutton.Image = "http://www.roblox.com/asset/?id=83415391084673"
            shadowbutton.ImageColor3 = Color3.fromRGB(0,0,0)
            shadowbutton.Parent = shadowframe

            local frame = Instance.new("Frame")
            frame.Size = UDim2.new(0, 100, 0, 100)
            frame.Position = UDim2.new(0.015, 0, 0.2, 0)
            frame.BackgroundTransparency = 0.5
            frame.BorderSizePixel = 0
            frame.BackgroundColor3 = Color3.fromRGB(153, 102, 204)
            frame.Parent = screenGui

            local corner = Instance.new("UICorner")
            corner.CornerRadius = UDim.new(0.2, 0)
            corner.Parent = frame

            local button = Instance.new("ImageButton")
            button.Size = UDim2.new(1, 0, 1, 0)
            button.BackgroundTransparency = 1
            button.Image = "http://www.roblox.com/asset/?id=83415391084673"
            button.ImageColor3 = Color3.fromRGB(255, 255, 255)
            button.Parent = frame
            

            local isEnabled = false
            button.MouseButton1Click:Connect(function()
                isEnabled = not isEnabled
                rayfie.Enabled = isEnabled
                local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
                local goal = {Size = UDim2.new(0, 120, 0, 120)}
                local tween = game:GetService("TweenService"):Create(button, tweenInfo, goal)
                tween:Play()
                tween.Completed:Connect(function()
                    local returnTween = game:GetService("TweenService"):Create(button, tweenInfo, {Size = UDim2.new(0, 100, 0, 100)})
                    returnTween:Play()
                end)
            end)
            local dragging = false
            local dragInput, mousePos, buttonPos
            local userInputService = game:GetService("UserInputService")

            button.InputBegan:Connect(function(input, gameProcessedEvent)
                if gameProcessedEvent then return end
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    dragging = true
                    mousePos = input.Position
                    buttonPos = button.Position
                end
            end)

            button.InputChanged:Connect(function(input)
                if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                    local delta = input.Position - mousePos
                    button.Position = UDim2.new(buttonPos.X.Scale, buttonPos.X.Offset + delta.X, buttonPos.Y.Scale, buttonPos.Y.Offset + delta.Y)
                end
            end)

            button.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    dragging = false
                end
            end)
            break
        end
    end
end
end)
