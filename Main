print([[
--------------------------------------------------------------------------------------
 ________  ___       _______   _____ ______   ________  _________  ___  ________      
|\   ____\|\  \     |\  ___ \ |\   _ \  _   \|\   __  \|\___   ___\\  \|\   ____\     
\ \  \___|\ \  \    \ \   __/|\ \  \\\__\ \  \ \  \|\  \|___ \  \_\ \  \ \  \___|_    
 \ \  \    \ \  \    \ \  \_|/_\ \  \\|__| \  \ \   __  \   \ \  \ \ \  \ \_____  \   
  \ \  \____\ \  \____\ \  \_|\ \ \  \    \ \  \ \  \ \  \   \ \  \ \ \  \|____|\  \  
   \ \_______\ \_______\ \_______\ \__\    \ \__\ \__\ \__\   \ \__\ \ \__\_________\
    \|_______|\|_______|\|_______|\|__|     \|__|\|__|\|__|    \|__|  \|__|\_________|

                        ___  ___  ___  ___  ________     
                        |\  \|\  \|\  \|\  \|\   __  \    
                        \ \  \\\  \ \  \\\  \ \  \|\ /_   
                         \ \   __  \ \  \\\  \ \   __  \  
                          \ \  \ \  \ \  \\\  \ \  \|\  \ 
                           \ \__\ \__\ \_______\ \_______\
                            \|__|\|__|\|_______|\|_______|
----------------------------------------------------------------------------------------------- --
]])


local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:FindFirstChild("HumanoidRootPart")

while not rootPart do
    rootPart = character:FindFirstChild("HumanoidRootPart")
    wait()
end

game:GetService("Players").LocalPlayer.Idled:connect(function()
    game:GetService("VirtualUser"):CaptureController()
    game:GetService("VirtualUser"):ClickButton2(Vector2.new())
end)

function getmaincode()
    local characters = "QWERTYUIOPASDFGHJKLZXCVBNM"
    local result = ""
    for i = 1, 1 do
        local randomIndex = math.random(2, #characters)
        result = result .. string.sub(characters, randomIndex, randomIndex)
    end
    return result
end

function getcode()
    local characters = "1234567890"
    local result = ""
    for i = 1, 5 do
        local randomIndex = math.random(2, #characters)
        result = result .. string.sub(characters, randomIndex, randomIndex)
    end
    return result
end

local function startTypingAnimation3()
    local randomText1 = getmaincode()
    local randomText2 = getcode()
    local username = game.Players.LocalPlayer.Character.Name
    random_name = " | Clematis Hub | " .. username .. " | Session : ( "..randomText1.."-"..randomText2.." ) "
end
spawn(startTypingAnimation3)

local usernames = game.Players.LocalPlayer.Character.Name
local pid = tostring(game.PlaceId)

print("Loading Lib")
_G.theme = "Amethyst"
wait(0.2)
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
print("Ui Lib Loaded")
wait(1)
print("Loading Function")
local MainWindow = Rayfield:CreateWindow({
    Name = random_name or "Clematis Hub | Err Loading | Session : ( Error! )",
    Icon = 0,
    LoadingTitle = "Loading!",
    LoadingSubtitle = "Script By Seaweed_hunter",
    Theme = _G.theme,
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "ClematisHub",
        FileName = usernames .. "_SavedConfig_" .. pid
    },
    Discord = {
        Enabled = false,
        Invite = "noinvitelink",
        RememberJoins = true
    },
    KeySystem = false,
    KeySettings = {
        Title = "Key?",
        Subtitle = "Key on Discord Server",
        Note = "Get Key From Discord",
        FileName = "Key",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"NOOOO"}
    }
})

local MainTab = MainWindow:CreateTab("Auto Farm")
local InstantKill = MainTab:CreateSection("Kill Aura")

killmobpercent = {
    ["90%"] = 0.90,
    ["75%"] = 0.75,
    ["50%"] = 0.50,
    ["25%"] = 0.25,
    ["10%"] = 0.10,
}
defaultkillmobpercent = 0.90

local killmobpercentDropdown = MainTab:CreateDropdown({
    Name = "Kill Mob at %",
    Options = {"90%", "75%", "50%", "25%", "10%"},
    CurrentOption = "90%",
    MultipleOptions = false,
    Flag = "Inskillpercent",
    Callback = function(Option)
        local selected = type(Option) == "table" and Option[1] or Option
        if killmobpercent[selected] then
            defaultkillmobpercent = killmobpercent[selected]
            print("[DEBUG] kill mob at percent set to:", defaultkillmobpercent)
        else
            print("[ERROR] Invalid kill percentage selected:", selected)
        end
    end,
})

local SetHealth = false
local hitboxThread = nil
local KillAura = MainTab:CreateToggle({
    Name = "Instant Kill",
    CurrentValue = false,
    Flag = "Kill Aura",
    Callback = function(Value)
        SetHealth = Value
        if SetHealth and not hitboxThread then
            hitboxThread = task.spawn(function()
                while SetHealth do
                    task.wait(0.1)
                    local mobFolder = workspace:FindFirstChild("Main")
                    local me = game.Players.LocalPlayer.Character

                    local player = game.Players.LocalPlayer
                    local character = player.Character or player.CharacterAdded:Wait()
                    if not character or not character:FindFirstChild("HumanoidRootPart") then
                        return
                    end
                    
                    local hrp = me:FindFirstChild("HumanoidRootPart")
                    if not hrp then break end
                    if mobFolder then
                        local plyRoot = hrp
                        local closestMob = nil
                        local closestDistance = math.huge

                        for _, islandFolder in pairs(mobFolder:GetChildren()) do
                            if islandFolder:IsA("Folder") then
                                for _, mobGroupFolder in pairs(islandFolder:GetChildren()) do
                                    if mobGroupFolder:IsA("Folder") then
                                        for _, mob in pairs(mobGroupFolder:GetChildren()) do
                                            local humanoid = mob:FindFirstChildOfClass("Humanoid")
                                            local rootPart = mob:FindFirstChild("HumanoidRootPart")
                                            local isMob = mob:FindFirstChild("Mob")

                                            if humanoid and rootPart and isMob and isMob:IsA("BoolValue") and humanoid.Health > 0 then
                                                local distance = (plyRoot.Position - rootPart.Position).Magnitude
                                                if distance < closestDistance then
                                                    closestDistance = distance
                                                    closestMob = mob
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end

                        if closestMob then
                            local humanoid = closestMob:FindFirstChildOfClass("Humanoid")
                            local rootPart = closestMob:FindFirstChild("HumanoidRootPart")
                            if humanoid and rootPart and humanoid.Health > 0 then
                                if humanoid.Health < humanoid.MaxHealth * 0.99 then
                                    rootPart.Anchored = true
                                end
                                if humanoid.Health < humanoid.MaxHealth * defaultkillmobpercent then
                                    rootPart.Anchored = false
                                    humanoid.Health = 0
                                end
                            end
                        end
                    end
                end
                hitboxThread = nil
            end)
        elseif not SetHealth and hitboxThread then
            hitboxThread = nil
        end
    end
})

local OnMob = false
Sittingsss = nil
local OnMob = MainTab:CreateToggle({
    Name = "Go to mob",
    CurrentValue = false,
    Flag = "OnMob",
    Callback = function(Value)
        OnMob = Value
        if OnMob and not Sittingsss then
            Sittingsss = task.spawn(function()
                local bodyVelocity
                while OnMob do
                    task.wait(0.1)
                    local mobFolder = workspace:FindFirstChild("Main")
                    local player = game.Players.LocalPlayer
                    local character = player.Character or player.CharacterAdded:Wait()

                    if not character or not character:FindFirstChild("HumanoidRootPart") then
                        break
                    end
                    
                    local humanoid = character:FindFirstChildOfClass("Humanoid")
                    if not humanoid or humanoid.Health <= 0 then
                        if bodyVelocity then
                            bodyVelocity:Destroy()
                        end
                        break
                    end

                    local hrp = character:FindFirstChild("HumanoidRootPart")
                    if not hrp then break end

                    humanoid.PlatformStand = true

                    if bodyVelocity then
                        bodyVelocity:Destroy()
                    end
                    bodyVelocity = Instance.new("BodyVelocity")
                    bodyVelocity.MaxForce = Vector3.new(100000, 100000, 100000)
                    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
                    bodyVelocity.Parent = hrp

                    if mobFolder then
                        local plyRoot = hrp
                        local closestMob = nil
                        local closestDistance = math.huge

                        for _, islandFolder in pairs(mobFolder:GetChildren()) do
                            if islandFolder:IsA("Folder") then
                                for _, mobGroupFolder in pairs(islandFolder:GetChildren()) do
                                    if mobGroupFolder:IsA("Folder") then
                                        for _, mob in pairs(mobGroupFolder:GetChildren()) do
                                            local mobHumanoid = mob:FindFirstChildOfClass("Humanoid")
                                            local rootPart = mob:FindFirstChild("HumanoidRootPart")
                                            local isMob = mob:FindFirstChild("Mob")

                                            if mobHumanoid and rootPart and isMob and isMob:IsA("BoolValue") and mobHumanoid.Health > 0 then
                                                local distance = (plyRoot.Position - rootPart.Position).Magnitude
                                                if distance < closestDistance then
                                                    closestDistance = distance
                                                    closestMob = mob
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end

                        if closestMob and closestDistance <= 150 then
                            local rootPart = closestMob:FindFirstChild("HumanoidRootPart")
                            if rootPart then
                                hrp.CFrame = rootPart.CFrame * CFrame.new(0, 6, 0) * CFrame.Angles(math.rad(-90), 0, 0)
                            end
                        end
                    end
                end

                if character then
                    local humanoid = character:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        humanoid.PlatformStand = false
                    end
                    local hrp = character:FindFirstChild("HumanoidRootPart")
                    if hrp then
                        if bodyVelocity then
                            bodyVelocity:Destroy()
                        end
                        for _, obj in pairs(hrp:GetChildren()) do
                            if obj:IsA("BodyVelocity") then
                                obj:Destroy()
                            end
                        end
                    end
                end

                Sittingsss = nil
            end)
        elseif not OnMob and Sittingsss then
            Sittingsss = nil
            local me = game.Players.LocalPlayer.Character
            if me then
                local humanoid = me:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.PlatformStand = false
                end
                local hrp = me:FindFirstChild("HumanoidRootPart")
                if hrp then
                    for _, obj in pairs(hrp:GetChildren()) do
                        if obj:IsA("BodyVelocity") then
                            obj:Destroy()
                        end
                    end
                end
            end
        end
    end
})

local Mine = MainTab:CreateSection("Auto Mine Ore")
local Minning = false
local Minning = MainTab:CreateToggle({
    Name = "Auto Mine Ore",
    CurrentValue = false,
    Flag = "AOre",
    Callback = function(Value)
        Minning = Value
        local oreFolder = workspace.Main.Ore
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        if not character or not character:FindFirstChild("HumanoidRootPart") then
            return
        end

        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        local camera = game.Workspace.CurrentCamera
        
        while Minning do
            if not player.Character then
                repeat wait(1) until player.Character
                character = player.Character
                humanoidRootPart = character:WaitForChild("HumanoidRootPart")
            end

            for _, ore in pairs(oreFolder:GetChildren()) do
                if ore:IsA("Model") and ore.Name == "Ore" then
                    local foundPrompt = false
                    
                    for _, obj in pairs(ore:GetDescendants()) do
                        if obj:IsA("ProximityPrompt") and obj.Name == "{}" then
                            if not obj.Enabled then
                                foundPrompt = false
                                break
                            end
                            
                            humanoidRootPart.CFrame = ore.PrimaryPart.CFrame * CFrame.new(0, 3, 0)
                            
                            local orePosition = ore.PrimaryPart.Position
                            local cameraOffset = Vector3.new(0, 5, 0)
                            camera.CFrame = CFrame.new(orePosition + cameraOffset, orePosition)

                            obj.RequiresLineOfSight = false

                            wait(0.4)
                            obj:InputHoldBegin()
                            foundPrompt = true
                            break
                        end
                    end
                    
                    if foundPrompt then
                        break
                    end
                end
            end
            wait(1)
        end
    end
})


local AutoClick = MainTab:CreateSection("Auto Click")

local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")

local player = Players.LocalPlayer
local screenGui = CoreGui:FindFirstChild("CrosshairGui")

if not screenGui then
    screenGui = Instance.new("ScreenGui")
    screenGui.Name = "CrosshairGui"
    screenGui.Parent = CoreGui

    local crosshair = Instance.new("ImageLabel")
    crosshair.Size = UDim2.new(0, 45, 0, 45)
    crosshair.Position = UDim2.new(0.5, -5, 0.5, 260)
    crosshair.BackgroundTransparency = 1
    crosshair.Image = "rbxassetid://103448393060927"
    crosshair.Parent = screenGui
    
    local dragging, dragInput, dragStart, startPos

    local function Update(input)
        local delta = input.Position - dragStart
        crosshair.Position = UDim2.new(
            startPos.X.Scale, startPos.X.Offset + delta.X,
            startPos.Y.Scale, startPos.Y.Offset + delta.Y
        )
    end

    local function StartDrag(input)
        dragging = true
        dragStart = input.Position
        startPos = crosshair.Position
    end

    local function StopDrag()
        dragging = false
    end

    crosshair.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            StartDrag(input)
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    StopDrag()
                end
            end)
        end
    end)

    crosshair.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            Update(input)
        end
    end)
end

local function endClick()
    local crosshair = screenGui:FindFirstChildOfClass("ImageLabel")
    if crosshair then
        local midX, midY = crosshair.AbsolutePosition.X + 10, crosshair.AbsolutePosition.Y + 10
        VirtualInputManager:SendMouseButtonEvent(midX, midY, 0, true, game, 0)
        wait(0.1)
        VirtualInputManager:SendMouseButtonEvent(midX, midY, 0, false, game, 0)
    end
end

Clicking = false
local Clicking = MainTab:CreateToggle({
    Name = "Auto Click",
    CurrentValue = false,
    Flag = "Clicking",
    Callback = function(Value)
        Clicking = Value
        if Clicking then
            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

            while Clicking do
                local player = game.Players.LocalPlayer
                local character = player.Character or player.CharacterAdded:Wait()
                if not character or not character:FindFirstChild("HumanoidRootPart") then
                    return
                end
                endClick()
                wait(0.1)
            end
        end
    end
})
